# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

service:
  base-path: /pet
  auth: true

  endpoints:
    addPet:
      display-name: Add a new pet to the store
      docs: Add a new pet to the store
      method: POST
      path: ""
      request: Pet
      response: Pet
      errors:
        - InvalidPetInputError
      examples:
        - request: $Pet.ExamplePetRequest
          response: 
            body: $Pet.ExamplePetResponse

    updatePet:
      display-name: Update an existing pet
      docs: Update an existing pet by ID
      method: PUT
      path: ""
      request: Pet
      response: Pet
      errors:
        - InvalidPetIDError
        - PetNotFoundError
      examples:
        - request: $Pet.ExamplePetRequest
          response: 
            body: $Pet.ExamplePetResponse

    findPetsByStatus:
      display-name: Find pets by status
      docs: Multiple status values can be provided with comma separated strings
      method: GET
      path: /findByStatus
      request:
        name: findPetsByStatusRequest
        query-parameters:
          status:
            type: optional<PetStatus>
            docs: Status values that need to be considered for filter
      response: list<Pet>
      errors:
        - InvalidPetStatusError
      examples:
        - response: 
            body: 
              - $Pet.ExamplePetResponse

    findPetsByTags:
      display-name: Find pets by tags
      docs: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      method: GET
      path: /findByTags
      request: 
        name: findPetsByTagsRequest
        query-parameters:
          tags:
            type: optional<string>
            docs: Tags to filter by
      response: list<Pet>
      errors:
        - InvalidTagError
      examples:
        - response: 
            body: 
              - $Pet.ExamplePetResponse

    findPetByID:
      display-name: Find pet by ID
      docs: Find a single pet by ID
      method: GET
      path: /{petID}
      path-parameters:
        petID:
          type: integer
          docs: ID of pet to return
      response: Pet
      errors:
        - InvalidPetIDError
        - PetNotFoundError
      examples:
        - response: 
            body: $Pet.ExamplePetResponse

    updatePetWithForm:
      display-name: Updates a pet in the store with form data
      method: POST
      path: /{petID}
      path-parameters:
        petID:
          type: integer
          docs: ID of pet that needs to be updated
      request:
        name: updatePetWithFormRequest
        query-parameters:
          name:
            type: optional<string>
            docs: Name of pet that needs to be updated
          status:
            type: optional<string>
            docs: Status of pet that needs to be updated
      errors:
        - InvalidPetIDError

    deletePet:
      display-name: Delete a pet
      method: DELETE
      path: /{petID}
      path-parameters:
        petID:
          type: integer
          docs: Pet ID to delete
      errors:
        - InvalidPetIDError

    uploadImageFile:
      display-name: Upload an image
      method: POST
      path: /{petID}/uploadImageFile
      path-parameters:
        petID:
          type: integer
          docs: ID of pet to update
      request:
        name: uploadImageFileRequest
        query-parameters:
          additionalMetadata:
            type: optional<string>
            docs: Additional Metadata
        body:
          properties:
            file: file
      response: ApiResponse
      # commented out below as keeps causing "Example is not an object"
      # error on generate -- looks like a bug where if there's a request
      # field for the endpoint, and you don't include a request example,
      # it causes an error -- but there should be no request example
      # for this endpoint as it's a file. 
      # examples:
      #   - response: 
      #       body: $ApiResponse.ExampleApiResponse

types:
  Pet:
    properties:
      name: string
      photoUrls: list<string>
      id: optional<integer>
      category: optional<Category>
      tags:
        type: optional<list<Tag>>
      status:
        type: optional<PetStatus>
        docs: pet status in the store
    examples:
      - name: ExamplePetRequest
        value:
          id: 1
          name: "doggie"
          photoUrls:
            - photoUrls
      - name: ExamplePetResponse
        value:
          id: 1
          name: doggie
          category: $Category.ExampleCategory
          photoUrls:
            - photoUrls
          tags:
            - $Tag.ExampleTag1
          status: available

  Category:
    properties:
      id: optional<integer>
      name: optional<string>
    examples:
      - name: ExampleCategory
        value:
          id: 1
          name: Dogs

  PetStatus:
    enum:
      - available
      - pending
      - sold

  Tag:
    properties:
      id: optional<integer>
      name: optional<string>
    examples:
      - name: ExampleTag1
        value:
          id: 1
          name: tag1
      - name: ExampleTag2
        value:
          id: 2
          name: tag2

  ApiResponse:
    properties:
      code: optional<integer>
      type: optional<string>
      message: optional<string>
    examples:
      - name: ExampleApiResponse
        value:
          code: 1
          type: type
          message: message

errors:
  InvalidPetIDError:
    status-code: 400
  InvalidPetInputError:
    status-code: 400
  PetNotFoundError:
    status-code: 404
    type: Pet
  InvalidPetStatusError:
    status-code: 400
    type: PetStatus
  InvalidTagError:
    status-code: 400
    type: Tag
